import org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension

buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath Deps.android.plugin
        classpath Deps.kotlin.plugin
        classpath Deps.sqlDelight.plugin
        classpath Deps.sqlDelight.runtime
        classpath Deps.kotlinx.atomicfu.plugin
        classpath Deps.careem.mockingbird.plugin
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    group GROUP
    version VERSION

    repositories {
        mavenCentral()
        mavenLocal()
        google()
    }
}

subprojects { subProject ->
    // Workaround for debug Android instrumentation (not unit) tests failing
    // as a part of `sonar` task.
    //
    // Note that this tasks aren't yet a part of the regular `build` anyway.
    subProject.afterEvaluate {
        // To avoid warnings like this:
        // "The following Kotlin source sets were configured but not added to any Kotlin compilation:"
        subProject.extensions.findByType(KotlinMultiplatformExtension)
                ?.sourceSets
                ?.removeAll { it.name.contains("androidAndroidTest") }
    }
}

void setupMultiplatformLibrary(Project project, List<String> platforms = SupportedTargets.COMMON, Boolean shouldPublish = true) {
    project.apply plugin: 'org.jetbrains.kotlin.multiplatform'

    project.group = GROUP
    project.version = VERSION

    project.kotlin {
        sourceSets {
            commonTest {
                dependencies {
                    implementation Deps.kotlin.test.common
                    implementation Deps.kotlin.test.annotationsCommon
                    implementation Deps.careem.mockingbird.common
                }
            }
        }
    }
}

void setupTargetsWithDefaultSourceSets(Project project, List<String> platforms = SupportedTargets.COMMON, Boolean addSqlDelightCompilerArgs = false) {
    if (platforms.contains(SupportedTargets.IOS)) {
        setupIosTargets(project, addSqlDelightCompilerArgs)
    }

    if (platforms.contains(SupportedTargets.JVM)) {
        setupJvmTarget(project)
    }

    if (platforms.contains(SupportedTargets.ANDROID)) {
        setupAndroidTarget(project)
    }

    project.kotlin {
        sourceSets {
            all {
                group GROUP
                version VERSION

                languageSettings {
                    progressiveMode = true
                    optIn('kotlin.Experimental')
                }
            }
        }
    }
}


private void setupIosTargets(Project project, Boolean addSqlDelightCompilerArgs = false) {
    project.kotlin {
        targets.fromPreset(presets.iosX64, 'iosX64') {
            if (addSqlDelightCompilerArgs) {
                compilations.each {
                    it.kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3"]
                }
            }
        }
        targets.fromPreset(presets.iosArm64, 'iosArm64') {
            if (addSqlDelightCompilerArgs) {
                compilations.each {
                    it.kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3"]
                }
            }
        }

        sourceSets {
            iosX64Main.dependsOn nativeCommonMain
            iosX64Test.dependsOn nativeCommonTest
            iosArm64Main.dependsOn nativeCommonMain
            iosArm64Test.dependsOn nativeCommonTest

            iosX64Test {
                dependencies {
                    implementation "com.careem.mockingbird:mockingbird-iosx64:2.0.0-beta04"
                }
            }
            iosArm64Test {
                dependencies {
                    implementation "com.careem.mockingbird:mockingbird-iosarm64:2.0.0-beta04"
                }
            }
        }
    }
}

private void setupJvmTarget(Project project) {
    project.kotlin {
        targets.fromPreset(presets.jvm, 'jvm')

        sourceSets {
            jvmMain {
                dependencies {

                }
            }


            jvmTest {
                dependencies {
                    implementation Deps.kotlin.test.junit
                    implementation "com.careem.mockingbird:mockingbird-jvm:2.0.0-beta04"
                }
            }
        }
    }
}

private void setupAndroidTarget(Project project) {
    project.apply plugin: 'com.android.library'

    project.android {
        compileSdkVersion Deps.android.compileSdkVersion
        defaultConfig {
            minSdkVersion Deps.android.minSdkVersion
            targetSdkVersion Deps.android.targetSdkVersion
            versionCode 1
            versionName VERSION
        }
        buildTypes {
            release {
                minifyEnabled false
                consumerProguardFiles 'proguard-rules.pro'
            }
        }

        // By default the android gradle plugin expects to find the kotlin source files in
        // the folder `main` and the test in the folder `test`. This is to be able place
        // the source code files inside androidMain and androidTest folders
        sourceSets {
            main {
                manifest.srcFile 'src/androidMain/AndroidManifest.xml'
                java.srcDirs = ['src/androidMain/kotlin']
                res.srcDirs = ['src/androidMain/res']
            }
            test {
                java.srcDirs = ['src/androidTest/kotlin', 'src/commonTest/kotlin']
                res.srcDirs = ['src/androidTest/res']
            }
        }

        libraryVariants.all { variant ->
            variant.outputs.all { output ->
                outputFileName = "${project.name}-${defaultConfig.versionName}.aar"
            }
        }
    }

    project.kotlin {
        targets.fromPreset(presets.android, 'android')

        sourceSets {
            androidMain {
                dependencies {
                }
            }

            androidTest {
                dependencies {
                    implementation Deps.kotlin.test.junit
                    implementation "com.careem.mockingbird:mockingbird-jvm:2.0.0-beta04"
                }
            }
        }
    }
}